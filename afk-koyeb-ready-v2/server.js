import express from 'express'
import http from 'http'
import cors from 'cors'
import { WebSocketServer } from 'ws'
import { v4 as uuidv4 } from 'uuid'
import path from 'path'
import { fileURLToPath } from 'url'
import mineflayer from 'mineflayer'
import url from 'url'
const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const ADMIN_TOKEN = process.env.ADMIN_TOKEN || ''
class BotManager{constructor(){this.sessions=new Map(),this.listeners=new Set()}onBroadcast(n){return this.listeners.add(n),()=>this.listeners.delete(n)}broadcast(n,t){for(const e of this.listeners)try{e({type:n,payload:t})}catch{}}list(){return[...this.sessions.values()].map(n=>({id:n.id,status:n.status,host:n.config.host,port:n.config.port,username:n.bot?.username||n.config.username,auth:n.config.auth,createdAt:n.createdAt,lastEvent:n.lastEvent,uptimeMs:n.startedAt?Date.now()-n.startedAt:0,afkMode:n.config.afkMode||'jitter'}))}log(n,t,e){const s=this.sessions.get(n);if(!s)return;const o={ts:Date.now(),level:t,msg:e};s.logs.push(o),s.logs.length>400&&s.logs.splice(0,s.logs.length-400),this.broadcast('log',{id:n,entry:o})}_startAntiAfk(n){const t=n.bot,e=n.config,s=e.afkMode||'jitter',o=Math.max(15000,Number(e.afkIntervalMs||6e4)),a=(r,i)=>r+Math.random()*(i-r),c=()=>{try{if(!t.entity)return;const r=(t.entity.yaw||0)+a(-Math.PI/8,Math.PI/8),i=a(-.2,.2);t.look(r,i,!0),e.keepAliveCmd&&Math.random()<.2&&t.chat(e.keepAliveCmd),s==='jitter'?(t.setControlState('jump',!0),setTimeout(()=>t.setControlState('jump',!1),200+Math.floor(Math.random()*200)),Math.random()<.5&&t.swingArm('right'),Math.random()<.3&&(t.setControlState('sneak',!0),setTimeout(()=>t.setControlState('sneak',!1),400))):s==='circle'?(t.setControlState('forward',!0),setTimeout(()=>t.setControlState('forward',!1),1200+Math.floor(Math.random()*400)),t.look((t.entity.yaw||0)+(Date.now()%1e3)/1e3*Math.PI/2,0,!0)):s==='strafe'?(t.setControlState(Math.random()<.5?'left':'right',!0),setTimeout(()=>t.setControlState('left',!1),800),Math.random()<.4&&(t.setControlState('jump',!0),setTimeout(()=>t.setControlState('jump',!1),200))):s==='walkabout'&&(t.setControlState(Math.random()<.5?'forward':'back',!0),setTimeout(()=>{t.setControlState('forward',!1),t.setControlState('back',!1)},700+Math.floor(Math.random()*500))),this.log(n.id,'trace',`Anti-AFK tick (${s})`)}catch(r){this.log(n.id,'warn','Anti-AFK error: '+(r?.message||r))}};n.antiAfkTimer=setInterval(c,o)}async start(n){const t=uuidv4(),e={id:t,config:n,status:'starting',logs:[],createdAt:Date.now(),lastEvent:'init',bot:null,antiAfkTimer:null,reconnectTimer:null,startedAt:Date.now()};this.sessions.set(t,e),this.broadcast('sessions',this.list());const s=()=>{this.log(t,'info',`Connecting to ${n.host}:${n.port} (auth=${n.auth})`);const o=mineflayer.createBot({host:n.host,port:Number(n.port||25565),auth:n.auth||'microsoft',username:n.auth==='offline'?n.username||'Player':void 0});e.bot=o;const a=r=>{e.status=r,this.broadcast('sessions',this.list())};o.once('login',()=>{a('online'),e.lastEvent='login',this.log(t,'ok',`Logged in as ${o.username}`)}),o.once('spawn',()=>{e.lastEvent='spawn',this.log(t,'ok','Spawned'),n.joinCmd&&(this.log(t,'info','joinCmd: '+n.joinCmd),o.chat(n.joinCmd)),this._startAntiAfk(e)}),o.on('kicked',r=>{e.lastEvent='kicked',this.log(t,'warn','KICKED: '+r)}),o.on('message',r=>this.log(t,'chat',r?.toString?r.toString():String(r))),o.on('death',()=>{this.log(t,'warn','Bot died. Trying to /respawn'),setTimeout(()=>{try{o.chat('/respawn')}catch{}},2e3)}),o.on('end',()=>{a('ended'),e.lastEvent='end',this.log(t,'info','Disconnected'),e.antiAfkTimer&&(clearInterval(e.antiAfkTimer),e.antiAfkTimer=null),n.autoReconnect&&(this.log(t,'info','Reconnecting in '+Math.round(Number(n.reconnectDelayMs||1e4)/1e3)+'s'),e.reconnectTimer=setTimeout(()=>{a('reconnecting'),s()},Number(n.reconnectDelayMs||1e4)))}),o.on('error',r=>this.log(t,'error',r?.message||String(r)))};s(),this.log(t,'hint','Microsoft auth: check server logs for device-code link to approve login.');return{id:t}}stop(n){const t=this.sessions.get(n);if(!t)throw new Error('Session not found');t.reconnectTimer&&(clearTimeout(t.reconnectTimer),t.reconnectTimer=null),t.antiAfkTimer&&(clearInterval(t.antiAfkTimer),t.antiAfkTimer=null),t.bot&&(()=>{try{t.bot.quit('Stopped by user')}catch{}})(),t.status='stopped',t.lastEvent='stopped',this.log(n,'info','Session stopped'),this.broadcast('sessions',this.list())}logs(n){const t=this.sessions.get(n);return t?t.logs:[]}}const manager=new BotManager,app=express();app.use(cors()),app.use(express.json()),app.use(express.static(path.join(__dirname,'public')));function assertAuth(n,t,e){if(!ADMIN_TOKEN)return e();const s=n.headers.authorization||'';return s===`Bearer ${ADMIN_TOKEN}`?e():t.status(401).json({error:'unauthorized'})}app.get('/api/sessions',assertAuth,(n,t)=>t.json(manager.list())),app.post('/api/sessions',assertAuth,async(n,t)=>{const e=n.body||{};if(!e.host)return t.status(400).json({error:'host is required'});e.port||(e.port=25565),e.auth||(e.auth='microsoft');if(e.auth==='offline'&&!e.username)return t.status(400).json({error:'username is required in offline mode'});try{const{ id:s }=await manager.start({host:e.host,port:Number(e.port),auth:e.auth,username:e.username||'',joinCmd:e.joinCmd||'',keepAliveCmd:e.keepAliveCmd||'',afkIntervalMs:Number(e.afkIntervalMs||6e4),afkMode:e.afkMode||'jitter',autoReconnect:Boolean(e.autoReconnect??!0),reconnectDelayMs:Number(e.reconnectDelayMs||1e4)});t.json({id:s})}catch(e2){t.status(500).json({error:e2?.message||String(e2)})}}),app.post('/api/sessions/:id/stop',assertAuth,(n,t)=>{try{manager.stop(n.params.id),t.json({ok:!0})}catch(e){t.status(404).json({error:e?.message||String(e)})}}),app.get('/api/sessions/:id/logs',assertAuth,(n,t)=>t.json(manager.logs(n.params.id)));const server=http.createServer(app),wss=new WebSocketServer({server,path:'/ws'});wss.on('connection',(n,t)=>{if(ADMIN_TOKEN){const e=url.parse(t.url,!0).query;e.token!==ADMIN_TOKEN&&n.close()}const e=m=>{try{n.send(JSON.stringify(m))}catch{}};e({type:'sessions',payload:manager.list()});const s=manager.onBroadcast(e);n.on('close',s)});const PORT=process.env.PORT||3000;server.listen(PORT,()=>{console.log('AFK Console PRO listening on http://localhost:'+PORT),ADMIN_TOKEN&&console.log('API protected with ADMIN_TOKEN')})