const $=s=>document.querySelector(s);const tokenKey='afk.token';$('#saveToken').onclick=()=>{localStorage.setItem(tokenKey,$('#token').value.trim());alert('Saved token')};$('#token').value=localStorage.getItem(tokenKey)||'';function authHeaders(){const t=localStorage.getItem(tokenKey);return t?{'Authorization':'Bearer '+t}:{}};async function api(path,opt={}){const r=await fetch(path,{...opt,headers:{'Content-Type':'application/json',...(opt.headers||{}),...authHeaders()}});if(!r.ok) throw new Error((await r.json()).error||r.statusText);return r.json()}const logBox=$('#logBox');const logSel=$('#logSession');async function refreshSessions(){try{const list=await api('/api/sessions');logSel.innerHTML='<option value="">Choose session…</option>'+list.map(s=>`<option value="${s.id}">${s.username||'(auth…)'} @ ${s.host}</option>`).join('')}catch(e){console.warn(e)}}refreshSessions();logSel.onchange=async e=>{const id=e.target.value;if(!id){logBox.textContent='—';return}const rows=await api('/api/sessions/'+id+'/logs');logBox.textContent=rows.map(r=>`[${new Date(r.ts).toLocaleTimeString()}] ${r.level.toUpperCase()} | ${r.msg}`).join('\n');logBox.scrollTop=logBox.scrollHeight};$('#auth').onchange=()=>{$('#username').classList.toggle('hidden',$('#auth').value!=='offline')};$('#sessionForm').onsubmit=async e=>{e.preventDefault();const cfg={host:$('#host').value.trim(),port:Number($('#port').value||25565),auth:$('#auth').value,username:$('#auth').value==='offline'?$('#username').value.trim():undefined,joinCmd:$('#joinCmd').value.trim(),keepAliveCmd:$('#keepAliveCmd').value.trim(),afkMode:$('#afkMode').value,afkIntervalMs:Number($('#afkIntervalMs').value||60000),autoReconnect:$('#autoReconnect').checked,reconnectDelayMs:Number($('#reconnectDelayMs').value||10000)};if(!cfg.host) return alert('Server Host is required');if(cfg.auth==='offline'&&!cfg.username) return alert('Username is required in Offline mode');try{const {id}=await api('/api/sessions',{method:'POST',body:JSON.stringify(cfg)});alert('Session started: '+id);await refreshSessions();logSel.value=id;const rows=await api('/api/sessions/'+id+'/logs');logBox.textContent=rows.map(r=>`[${new Date(r.ts).toLocaleTimeString()}] ${r.level.toUpperCase()} | ${r.msg}`).join('\n');}catch(e2){alert('Failed to start: '+(e2?.message||e2))}};